const mensagemService = require('../services/mensagemService');
const esporteService = require('../services/esporteService');
const inscricaoService = require('../services/inscricaoService');

// üîê Verifica se o usu√°rio tem permiss√£o para acessar o grupo de esporte
async function verificarPermissao(req, esporteId) {
  // Garantir que o esporteId seja uma string
  const esporteIdStr = String(esporteId);
  
  console.log('üîç DEBUG verificarPermissao IN√çCIO:');
  console.log('- Usuario ID:', req.user.uid);
  console.log('- Usuario role:', req.user.role);
  console.log('- Esporte ID procurado:', esporteIdStr);
  
  // Acesso livre ao grupo "Geral"
  if (esporteIdStr === "0") {
    console.log('‚úÖ Acesso ao grupo Geral permitido');
    return;
  }

  // Admin tem acesso irrestrito
  if (req.user.role === 'admin') {
    console.log('‚úÖ Acesso admin permitido');
    return;
  }

  try {
    // Verifica se o esporte existe
    console.log('üîç Verificando se esporte existe...');
    const esporte = await esporteService.buscarEsportePorId(esporteIdStr);
    console.log('- Esporte encontrado:', esporte);
    
    if (!esporte) {
      console.log('‚ùå Esporte n√£o encontrado no banco');
      throw new Error('Esporte n√£o encontrado.');
    }
  } catch (error) {
    console.log('‚ùå Erro ao buscar esporte:', error.message);
    throw new Error('Esporte n√£o encontrado.');
  }

  // Verifica se o usu√°rio tem inscri√ß√£o aceita no esporte
  console.log('üîç Buscando inscri√ß√µes do usu√°rio...');
  const inscricoes = await inscricaoService.listarPorUsuario(req.user.uid);
  console.log('- Todas as inscri√ß√µes do usu√°rio:', JSON.stringify(inscricoes, null, 2));
  
  const inscricaoAceita = inscricoes.find(
    inscricao => inscricao.esporteId === esporteIdStr && inscricao.status === 'aceito'
  );
  console.log('- Inscri√ß√£o aceita encontrada:', inscricaoAceita);

  if (!inscricaoAceita) {
    console.log('‚ùå Acesso negado para usu√°rio:', req.user.uid, 'no esporte:', esporteIdStr);
    throw new Error('Acesso negado: voc√™ n√£o est√° inscrito neste esporte.');
  }
  console.log('‚úÖ Acesso permitido para usu√°rio:', req.user.uid, 'no esporte:', esporteIdStr);
}

module.exports = {
  // üì® Criar nova mensagem
  async criarMensagem(req, res) {
    try {
      const { conteudo } = req.body;
      const { esporteId } = req.params;

      await verificarPermissao(req, esporteId);

      const mensagem = await mensagemService.criarMensagem({
        conteudo,
        usuarioId: req.user.uid,
        usuarioNome: req.user.nome,
        esporteId: String(esporteId) // CORRIGIDO
      });

      res.status(201).json(mensagem);
    } catch (err) {
      console.error('Erro ao criar mensagem:', err);
      res.status(403).json({ error: err.message });
    }
  },

  // üìÑ Listar mensagens de um grupo
  async listarMensagens(req, res) {
    try {
      const { esporteId } = req.params;

      await verificarPermissao(req, esporteId);

      const mensagens = await mensagemService.listarMensagens(String(esporteId));
      res.json(mensagens);
    } catch (err) {
      console.error('Erro ao listar mensagens:', err);
      res.status(403).json({ error: err.message });
    }
  },

  // üìù Editar mensagem (somente autor)
  async editarMensagem(req, res) {
    try {
      const { id } = req.params;
      const { conteudo } = req.body;

      const mensagem = await mensagemService.editarMensagem(id, req.user.uid, conteudo);
      res.json(mensagem);
    } catch (err) {
      console.error('Erro ao editar mensagem:', err);
      res.status(403).json({ error: err.message });
    }
  },  // ‚ùå Excluir mensagem (autor ou admin)
  async excluirMensagem(req, res) {
    try {
      const { id } = req.params;
      const isAdmin = req.user.role === 'admin';
      
      console.log("Requisi√ß√£o de exclus√£o de mensagem recebida:");
      console.log("ID da mensagem recebida no par√¢metro:", id);
      console.log("Tipo do ID:", typeof id);
      console.log("Usu√°rio:", req.user.uid, "| √â admin:", isAdmin);
      
      if (!id) {
        return res.status(400).json({ error: 'ID da mensagem n√£o fornecido' });
      }
      
      // Limpar o ID - remover quaisquer caracteres n√£o seguros
      const cleanId = id.toString().trim();
      console.log("ID da mensagem limpo:", cleanId);
      
      await mensagemService.excluirMensagem(cleanId, req.user.uid, isAdmin);
      console.log("Mensagem exclu√≠da com sucesso:", cleanId);
      res.json({ message: 'Mensagem exclu√≠da com sucesso.' });
    } catch (err) {
      console.error('Erro ao excluir mensagem:', err);
      
      // Melhor tratamento de erro baseado no tipo
      if (err.message.includes('inv√°lido')) {
        return res.status(400).json({ error: err.message });
      }
      if (err.message.includes('n√£o encontrada')) {
        return res.status(404).json({ error: err.message });
      }
      if (err.message.includes('permiss√£o')) {
        return res.status(403).json({ error: err.message });
      }
      
      res.status(500).json({ error: err.message });
    }
  },
  // üìå Fixar/desfixar mensagem (admin)
  async fixarMensagem(req, res) {
    try {
      if (req.user.role !== 'admin') {
        throw new Error('Apenas administradores podem fixar mensagens.');
      }

      const { id } = req.params;
      const { fixada } = req.body;
      
      console.log("Requisi√ß√£o de fixar/desfixar mensagem recebida:");
      console.log("ID da mensagem:", id);
      console.log("Fixar:", fixada);
      
      if (!id) {
        return res.status(400).json({ error: 'ID da mensagem n√£o fornecido' });
      }
      
      // Limpar o ID - remover quaisquer caracteres n√£o seguros
      const cleanId = id.toString().trim();
      console.log("ID da mensagem limpo:", cleanId);

      const mensagem = await mensagemService.fixarMensagem(cleanId, fixada);
      console.log("Mensagem atualizada com sucesso:", mensagem);
      res.json(mensagem);
    } catch (err) {
      console.error('Erro ao fixar mensagem:', err);
      
      // Melhor tratamento de erro baseado no tipo
      if (err.message.includes('inv√°lido')) {
        return res.status(400).json({ error: err.message });
      }
      if (err.message.includes('n√£o encontrada')) {
        return res.status(404).json({ error: err.message });
      }
      if (err.message.includes('permiss√£o') || err.message.includes('administradores')) {
        return res.status(403).json({ error: err.message });
      }
      
      res.status(500).json({ error: err.message });
    }
  }
};
