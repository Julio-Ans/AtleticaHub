generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Produto {
  id          Int              @id @default(autoincrement())
  nome        String
  descricao   String
  preco       Float
  estoque     Int
  imagemUrl   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  pedidos     PedidoProduto[] 
  carrinho CartItem[]
}


model CartItem {
  id           Int       @id @default(autoincrement())
  studentEmail String
  produto      Produto   @relation(fields: [produtoId], references: [id])
  produtoId    Int
  quantidade   Int
  createdAt    DateTime  @default(now())
}

model Pedido {
  id           Int              @id @default(autoincrement())
  usuarioId    String
  usuario      Usuario          @relation(fields: [usuarioId], references: [id])
  total        Float
  status       String           @default("pendente")
  createdAt    DateTime         @default(now())
  produtos     PedidoProduto[]  // ← Relacionamento
}

model PedidoProduto {
  id         Int     @id @default(autoincrement())
  pedido     Pedido  @relation(fields: [pedidoId], references: [id])
  pedidoId   Int
  produto    Produto @relation(fields: [produtoId], references: [id])
  produtoId  Int
  quantidade Int
}

model EmailDomain {
  id      Int    @id @default(autoincrement())
  domain  String @unique
}

model InviteCode {
  id     Int     @id @default(autoincrement())
  code   String  @unique
  role   String
  used   Boolean @default(false)
}

model Esporte {
  id        String    @id @default(uuid())
  nome      String
  fotoUrl   String?   // URL da foto do esporte (opcional)
  criadoEm  DateTime  @default(now())
  inscricoes Inscricao[]
}

model Usuario {
  id             String   @id               // UID do Firebase
  nome           String
  dataNascimento DateTime
  telefone       String
  curso          String
  role           String @default("user")   // Adicionando o campo `role` para definir o tipo de usuário
  createdAt      DateTime @default(now())
  inscricoes     Inscricao[]
  pedidos Pedido[]
}

model Inscricao {
  id        String   @id @default(uuid())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId String
  esporte   Esporte  @relation(fields: [esporteId], references: [id])
  esporteId String
  status    String   @default("pendente") // pendente | aceito | recusado
  criadaEm  DateTime @default(now())
}
